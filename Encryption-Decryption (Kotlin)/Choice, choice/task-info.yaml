type: edu
files:
- name: src/Main.kt
  visible: true
  text: |-
    package encryptdecrypt

    import java.io.File

    fun main(args: Array<String>) {
        val modeIndex = args.indexOf("-mode")
        val mode = if (modeIndex == -1) "enc" else args[modeIndex + 1]

        val keyIndex = args.indexOf("-key")
        val key = if (keyIndex == -1) 0 else args[keyIndex + 1].toInt()

        val dataIndex = args.indexOf("-data")
        val data = if (dataIndex == -1) "" else args[dataIndex + 1]

        val fileInIndex = args.indexOf("-in")
        val fileInName = if (fileInIndex == -1) "" else args[fileInIndex + 1]

        val fileOutIndex = args.indexOf("-out")
        val fileOutName = if (fileOutIndex == -1) "" else args[fileOutIndex + 1]

        var input = ""
        when {
            data.isNotEmpty() -> input = data
            fileInName.isNotEmpty() -> {
                val fileIn = File(fileInName)
                if (fileIn.exists()) {
                    input = fileIn.readText()
                } else {
                    println("Error: File ${fileIn.name} not found!")
                }
            }
        }

        val result = when (mode) {
            Mode.Encrypt.short -> input.encrypt(key)
            Mode.Decrypt.short -> input.decrypt(key)
            else -> ""
        }

        if (fileOutName.isNotEmpty()) {
            val fileOut = File(fileOutName)
            fileOut.writeText(result)
        } else {
            println(result)
        }
    }

    enum class Mode(val short: String) {
        Encrypt("enc"),
        Decrypt("dec")
    }

    fun String.encrypt(key: Int): String {
        val originalMessage = this
        val ciphertextBuilder = StringBuilder()

        originalMessage.forEach { letter ->
            ciphertextBuilder.append(
                letter.shift(Mode.Encrypt, key)
            )
        }

        return ciphertextBuilder.toString()
    }

    fun String.decrypt(key: Int): String {
        val ciphertext = this
        val originalMessageBuilder = StringBuilder()

        ciphertext.forEach { letter ->
            originalMessageBuilder.append(
                letter.shift(Mode.Decrypt, key)
            )
        }

        return originalMessageBuilder.toString()
    }

    fun Char.shift(mode: Mode, key: Int): Char {
        val letter = this
        return when (mode) {
            Mode.Encrypt -> letter + key
            Mode.Decrypt -> letter - key
        }
    }
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
- name: output.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/21971#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 05 Apr 2023 14:25:15 UTC"
record: -1
